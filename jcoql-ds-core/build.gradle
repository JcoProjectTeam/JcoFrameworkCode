apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'eclipse'
apply plugin: 'project-report'
group = 'jco.ql.jcods'
version = '1.0.1'

repositories {
	jcenter()
	flatDir {
		dirs 'libs/compile', 'libs/compile/downloaded',
				'libs/testCompile', 'libs/testCompileDownloaded','lib'
	}
}


configurations {
    download
    testDownload
}


jar {
    manifest {
        attributes "Main-Class": "jco.ql.db.ds.server.Server"
    }

    from {
     	configurations.runtime.asFileTree.files.collect { zipTree(it) }
    }
}


tasks.withType(Jar) {
	destinationDir = file("$rootDir/../jcoJars/jcoql-engine/deps/repository/jco/ql/jcods/jcoql-ds-core/1.0.1")
}

test {
	ignoreFailures = true
}


dependencies {
	implementation 'org.wololo:jts2geojson:0.14.3'
	implementation 'org.slf4j:slf4j-api:1.7.29'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
	
	compile files('lib/gson-2.8.2.jar')
	compile files('lib/httpclient-4.5.13.jar')
    compile files('lib/httpcore-4.4.13.jar')	
	
	implementation files('lib/jcoParser4.0.jar')
	compile project(':jcoql-model')
	
    testImplementation 'junit:junit:4.12'
}


task cleanDownloadedDependencies(type: Delete) {
    delete fileTree('libs/compile/downloaded')
}


task cleanDownloadedTestDependencies(type: Delete) {
    delete fileTree('libs/testCompile/downloaded')
}


task downloadDependencies(type: Copy) {
    from configurations.download
    into 'libs/compile/downloaded/'
}


task downloadTestDependencies(type: Copy) {
    from configurations.testDownload
    into 'libs/testCompile/downloaded/'
}

task updateDependencies {
    dependsOn cleanDownloadedDependencies, cleanDownloadedTestDependencies, downloadDependencies, downloadTestDependencies
}


fileTree(dir: 'libs/compile', include: '**/*.aar')
        .each { File file ->
    dependencies.add("compile",
            [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
}


fileTree(dir: 'libs/testCompile', include: '**/*.aar')
        .each { File file ->
    dependencies.add("testCompile",
            [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
}
